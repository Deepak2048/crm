swagger: "2.0.0"
info:
  title: "Welcome to Account and User  API"
  description: this api is used to check if api  is working or not
  version: 1.0.0
  server:
    -url: http://localhost:5555/
    description: this is local url server
schemes: [http,https]

paths:

#Post json/body & Body required
  /user/users:
    post:
      summary: Add a new user
      description: This api is used for users
      produces:
        -application/json
      consumes:
        -application/json
      parameters:
      - in: body
        name: user
        schema:
          type: object
          required: true
            -username
            -email
            -password
            -createdBy
            -updatedBy
            -status
            -accountId
          properties:
            userName:
              type: string
            email:
              type: string
            password:
              type: string
            createdBy:
              type: integer
            updatedBy:
              type: integer
            status:
              type: integer
            accountId:
              type: integer
      responses:
        '201':
          description: Inserted data to user table.



#get 
  /user/users/{id}:
    get:
      summary: Fetch user by thire id.
      description: List the specific use by id.
      parameters:
      - name: id
        in: path
        required: true
        schema:
        type: integer
        format: int64
      responses:
        "200":
          description: user data listed successfully by id.




#Put
  /user/updateUser/{id}:
    put:
      summary: update user by id
      description: Update the specific user by id.
      parameters:
      - name: id
        in: path
        required: true
        schema:
        type: integer
        format: int64
      responses:
        "200":
          description: user has been updated successfully by id.



        
 
 

#get for all users
  /user/allUsers:
    get:
      summary: List all users.
      description: listing all users
      responses:
        "200":
          description: all tha users listed successfully.
          shcema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer



#Delete
  /user/deleteUser/{d}:
    delete:
      summary: Delete user api
      description: used to delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
        type: integer
        format: int64
      responses:
        "200":
          description: user data deleted successfully by id.




#Post for account api 
  /account/accounts:
    post:
      summary: Add a new account
      description: This api is used for account
      produces:
        -application/json
      consumes:
        -application/json
      parameters:
      - in: body
        name: account
        schema:
          type: object
          required: true
            -accountName
            -createdBy
            -updatedBy
            -status
          properties:
            accountName:
              type: string
            createdBy:
              type: integer
            updatedBy:
              type: integer
            status:
              type: integer
      responses:
        '201':
          description: Inserted data to account table.



#get for account api
  /account/accounts/{accountId}:
    get:
      summary: Fetch account by thire accountId.
      description: List the specific use by accountId.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
        type: integer
        format: int64
      responses:
        "200":
          description: account data listed successfully by accountId.



#get for all Acounts
  /account/allAccounts:
    get:
      summary: List all accounts.
      description: listing all accounts
      responses:
        "200":
          description: all tha accounts are listed successfully.
          shcema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer



#Put
  /account/updateAccount/{accountId}:
    put:
      summary: update account by accountId
      description: Update the specific account by accountId.
      parameters:
      - name: id
        in: path
        required: true
        schema:
        type: integer
        format: int64
      responses:
        "200":
          description: account has been updated successfully by accountId.



#Delete
  /account/deleteAccount/{accountId}:
    delete:
      summary: Delete account api
      description: used to delete account
      parameters:
      - name: id
        in: path
        required: true
        schema:
        type: integer
        format: int64
      responses:
        "200":
          description: account data deleted successfully by id.



#Post json/body & Body required
  /register/signUp:
    post:
      summary: Register a new user
      description: This api is used for user registration
      produces:
        -application/json
      consumes:
        -application/json
      parameters:
      - in: body
        name: user
        schema:
          type: object
          required: true
            -name
            gender
            -email
            -password
          properties:
            name:
              type: string
              example: "Enter your name"
            gender:
              type: string
              example: "Enter your gender"
            email:
              type: string
              example: "raj@gmail.com"
            password:
              type: string
              example: "Enter your password"
      responses:
        '201':
          description: User has been register successfully.



#Post json/body & Body required
  /register/login:
    post:
      summary: Login to a user
      description: This api is used for user login
      produces:
        -application/json
      consumes:
        -application/json
      parameters:
      - in: body
        name: user
        schema:
          type: object
          required: true
            -email
            -password
          properties:
            email:
              type: string
              example: "raj@gmail.com"
            password:
              type: string
              example: "Enter your password"
      responses:
        '201':
          description: User has been Loged in successfully.